version: '3'
services: 
  song_db: 
    image: postgres
    environment:
      POSTGRES_PASSWORD: 'root'
      POSTGRES_DB: flask_api
      POSTGRES_USER: 'postgres'
    volumes:
      - postgres-data:/var/lib/postgresql/data
  song_queue:
    build:
      context: ./songService
      dockerfile: Dockerfile
    command: 'python3 -u consumer.py'
    depends_on:
      - song_db
  song_service:
    depends_on:
      - song_db
    image: song_service
    build: 
      context: ./songService
    env_file:
      - ./songService/.env
    expose:
      - "5000"
    volumes:
      - static_volume:/songService/static
  user_db: 
    image: postgres
    environment:
      POSTGRES_PASSWORD: 'root'
      POSTGRES_DB: user_db
      POSTGRES_USER: 'postgres'
    volumes:
      - postgres-userdb-data:/var/lib/postgresql/data
  user_service:
    depends_on:
      - user_db
    image: user_service
    build: 
      context: ./userService
    env_file:
      - ./userService/.env
    expose:
      - "5000"
  playlist_db: 
    image: postgres
    environment:
      POSTGRES_PASSWORD: 'root'
      POSTGRES_DB: playlist_db
      POSTGRES_USER: 'postgres'
    volumes:
      - postgres-playlistdb-data:/var/lib/postgresql/data
  playlist_service:
    depends_on:
      - playlist_db
    image: playlist_service
    build: 
      context: ./playlistService
    env_file:
      - ./playlistService/.env
    expose:
      - "5000"
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./apigateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/songService/static
    depends_on: 
      - song_service
      - user_service
  frontend:
    image: frontend
    restart: always
    build: 
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true

volumes:
  static_volume:
  postgres-userdb-data:
  postgres-data:
  postgres-playlistdb-data: